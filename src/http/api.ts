/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually. (ryandvl's manually edit.)
 * NLW Connect
 * OpenAPI spec version: 0.0.1
 */
export type subscribeToEventBody = {
  name: string
  email: string
  /** @nullable */
  referrer?: string | null
}

export type subscribeToEvent201 = {
  subscriberId: string
}

/**
 * @nullable
 */
export type GetInvitesSubscriberId302 =
  | (typeof GetInvitesSubscriberId302)[keyof typeof GetInvitesSubscriberId302]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvitesSubscriberId302 = {
  null: 'null',
} as const

export type getSubscriberInviteClicks200 = {
  count: number
}

export type getSubscriberInviteCount200 = {
  count: number
}

export type getSubscriberRankingPosition200 = {
  /** @nullable */
  position: number | null
}

export type GetRanking200RankingItem = {
  id: string
  name: string
  score: number
}

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[]
}

/**
 * @summary Subscribes someone to the event
 */
export const getsubscribeToEventUrl = () => {
  return 'http://localhost:3333/subscriptions'
}

export const subscribeToEvent = async (
  subscribeToEventBody: subscribeToEventBody,
  options?: RequestInit
): Promise<subscribeToEvent201> => {
  const res = await fetch(getsubscribeToEventUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(subscribeToEventBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: subscribeToEvent201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Access invite link and redirects user
 */
export const getInvitesSubscriberIdUrl = (subscriberId: string) => {
  return `http://localhost:3333/invites/${subscriberId}`
}

export const getInvitesSubscriberId = async (
  subscriberId: string,
  options?: RequestInit
): Promise<unknown> => {
  const res = await fetch(getInvitesSubscriberIdUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get subscriber invite clicks count
 */
export const getSubscriberInviteClicksUrl = (subscriberId: string) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`
}

export const getSubscriberInviteClicks = async (
  subscriberId: string,
  options?: RequestInit
): Promise<getSubscriberInviteClicks200> => {
  const res = await fetch(getSubscriberInviteClicksUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSubscriberInviteClicks200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get subscriber invites count
 */
export const getSubscriberInviteCountUrl = (subscriberId: string) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/count`
}

export const getSubscriberInviteCount = async (
  subscriberId: string,
  options?: RequestInit
): Promise<getSubscriberInviteCount200> => {
  const res = await fetch(getSubscriberInviteCountUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSubscriberInviteCount200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get subscriber ranking position
 */
export const getSubscriberRankingPositionUrl = (subscriberId: string) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/position`
}

export const getSubscriberRankingPosition = async (
  subscriberId: string,
  options?: RequestInit
): Promise<getSubscriberRankingPosition200> => {
  const res = await fetch(getSubscriberRankingPositionUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSubscriberRankingPosition200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get ranking
 */
export const getRankingUrl = () => {
  return 'http://localhost:3333/ranking'
}

export const getRanking = async (
  options?: RequestInit
): Promise<GetRanking200> => {
  const res = await fetch(getRankingUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}
